  <!DOCTYPE html>
  <html lang="en">

  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DWG to JPEG Conversion</title>
    <%-include("./header")%>
    <link href="./stylesheet.css" rel="stylesheet" />
  </head>

  <div class="modal fade flex" id="uploadModal" tabindex="-1" aria-labelledby="uploadModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="uploadModalLabel">
            FloorPlan import
          </h1>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div>
            <div>
              <input type="file" id="fileInput" accept=".pdf" class="btn" />
              Page Number:
              <input type="number" id="pageNumber" onchange="convertTojpg()" />
              <br>
              <img src="#" class="mt-3" alt="upload Image" id="picture" />
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <div class="hstack">
            <div class="hstack gap-3">
              <button class="btn btn-warning" id="rotateLeft">
                rotate left
              </button>
              <button id="rotateRight" class="btn btn-warning">
                rotate Right
              </button>
            </div>
          </div>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="cropImage()">
            Close
          </button>
        </div>
      </div>
    </div>
  </div>

  <body>
    <div class="table mt-3 ms-3">
      <div class="row">

        <div class="col-6">

          <div class="d-flex justify-content-center align-items-center">
            <div class="col text-start">
              <button type="button" class="btn btn-primary mt-5" data-bs-toggle="modal" data-bs-target="#uploadModal">
                upload floorplan
              </button>
            </div>
            <div class="col text-center mt-5">
              Floor Name:
              <input type="text" id="floorLevel" />
            </div>
            <div class="col text-end">
              <button type="button" class="btn btn-primary mt-5" id="clear">
                clear
              </button>
            </div>
          </div>
          <div class="position-relative transparent">
            <canvas class="p-0" id="shadeCanvas" style="position: absolute; z-index: -1;  "></canvas>
            <img src="https://placehold.co/600x400" alt="" id="new-floorplan" style="position: absolute; top: 0; left: 0;" usemap="#testmap" />
          </div>


        </div>


        <div class="col-5 pt-5">
          <!-- table col-->
          <div class="table border border-black ms-5" style="position: absoulte;height: 80vh; overflow-y: scroll;">
            <div class="row m-3 sticky-top" style="background-color: white;">
              <div class="col">
                <b style="font-size: 20px;"> Zones: </b>
              </div>
              <div class="col text-end">
                <button id="addZone" class="btn btn-secondary">+ </button>
              </div>
            </div>
            <div id="zoneList" class="p-3"></div>
            <div class="row m-3">
              <div id="buttonHolder">
                <div class="row m-3 flex justify-content-end">
                  <input class="btn btn-primary" type="button" style="width: 200px" value="submit" id="submit" />
                </div>
              </div>
            </div>
          </div>
        </div>

      </div>
    </div>
    <map name="testmap">
      <area shape="rect" coords="34,44,270,350" href="#" alt="Sun" />
      <area shape="rect" coords="290,172,333,250" href="#" alt="Sun" />
    </map>
    <script>
      function createArea() {

      }


      var zonelist;
      var imageData;
      var zoneLevel = 1;
      var zones = {};
      reinitializeMapster();
      var floor = zoneLevel.value;




      function reinitializeMapster() {
        console.log("Reinitializing mapster...");
        var canvas = document.getElementById("shadeCanvas");
        var image = document.getElementById("new-floorplan");
        var ctx = canvas.getContext("2d");
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        for (zone in zones) {
          var zone = zones[zone];
          if (zone.shape == "rect") {
            var startX = zone.startX * (image.width / zone.orginalImageWidth);
            var startY = zone.startY * (image.height / zone.orginalImageHeight);
            var endX = zone.endX * (image.width / zone.orginalImageWidth);
            var endY = zone.endY * (image.height / zone.orginalImageHeight);
            ctx.fillStyle = "rgb(0, 255, 0)";
            ctx.beginPath();
            if (endX > startX) {
              var width = Math.abs(endX - startX);
              if (endY > startY) {
                var height = Math.abs(endY - startY);
                ctx.rect(startX, startY, width, height);
              } else {
                var height = Math.abs(startY - endY);
                ctx.rect(startX, endY, width, height);
              }
            } else {
              var width = Math.abs(startX - endX);
              if (endY > startY) {
                var height = Math.abs(endY - startY);
                ctx.rect(endX, startY, width, height);
              } else {
                var height = Math.abs(startY - endY);
                ctx.rect(endX, endY, width, height);
              }
            }
            ctx.fill();
            console.log(zone)
            startX = zone.startX/ orginalImageWidth * orginalMapWidth;
            startY = zone.startY / orginalImageHeight * orginalMapHeight;
            endX = zone.endX / orginalImageWidth * orginalMapWidth;
            endY = zone.endY / orginalImageHeight * orginalMapHeight;
            

            //create area
            var area = document.createElement("area");
            area.shape = "rect";
            area.coords = `${startX},${startY},${endX},${endY}`;
            area.href = "#";
            area.alt = zone.name;
            area.setAttribute("data-mapster-key", zone.shape);
            $("map").append(area);
          }
        }

        // Unbind mapster
        $("#new-floorplan").mapster("unbind");
        console.log("Mapster unbound.");

        // Unbind the resize event to prevent looping
        $(window).off('resize.mapster');

        // Bind mapster
        $("#new-floorplan").mapster({
          enableAutoResizeSupport: true,
          autoResize: true,
          stroke: true,
          fillColor: "FF0000",
          onAutoResize: function() {
            try {
              var image = document.getElementById("new-floorplan");
              var width = image.clientWidth;
              var height = image.clientHeight;
              var canvas = document.getElementById("shadeCanvas");
              canvas.width = width;
              canvas.height = height;
              createArea(zones, "shadeCanvas");
            } catch (error) {
              console.log(error);
            }
          }
        });

        // Re-bind the resize event
        $(window).on('resize.mapster', function() {
          $("#new-floorplan").mapster('resize');
        });

        console.log("Mapster bound.");
      }


      var el = document.getElementById("picture");
      var vanilla = new Croppie(el, {
        viewport: {
          width: 600,
          height: 400
        },
        boundary: {
          width: 1000,
          height: 800
        },
        showZoomer: true,
        enableResize: false,
        enableOrientation: true,
      });
      var newImage;
      $(".cr-slider").attr({
        min: 0.5,
        max: 4.0
      });

      function cropImage() {
        vanilla
          .result({
            type: "blob",
            size: "viewport", // Use original size of the cropped image
          })
          .then(function(croppedImage) {
            newImage = croppedImage;
          });
      }
      $("#rotateLeft").click(function() {
        vanilla.rotate(-90);
      });
      $("#rotateRight").click(function() {
        vanilla.rotate(90);
      });
      $("#upload").click(function() {



        console.log("uploading");
        convertTojpg();
      });

      function convertTojpg() {
        var fileInput = document.getElementById("fileInput");
        var pageNumberInput = document.getElementById("pageNumber");
        var pageNumber = parseInt(pageNumberInput.value);
        var file = fileInput.files[0];

        var url = URL.createObjectURL(file);
        var pdf = new pdfjsLib.getDocument(url);
        pdf.promise.then(function(pdf) {
          console.log("Number of pages: " + pdf.numPages);

          pdf.getPage(pageNumber).then(function(page) {
            var viewport = page.getViewport({
              scale: 1
            });
            var canvas = document.createElement("canvas");
            var context = canvas.getContext("2d");
            canvas.height = viewport.height;
            canvas.width = viewport.width;

            var renderContext = {
              canvasContext: context,
              viewport: viewport,
            };
            var renderTask = page.render(renderContext);

            renderTask.promise.then(function() {
              var imageData = canvas.toDataURL("image/jpeg");
              // Use the imageData as needed
              console.log(imageData);
              uploadImage(imageData);
            });
          });
        });
      }

      function uploadImage(imageData) {
        try {
          var imageBase64 = imageData; //image data base 64
          imageView = document.getElementById("picture");
          picture.setAttribute("src", imageBase64);
          reinitializeMapster();

          vanilla.bind({
            url: imageBase64,
          });
          $("#uploadModal").off("hidden.bs.modal");
          $("#uploadModal").on("hidden.bs.modal", function() {
            floorDetails = {};
            var url = URL.createObjectURL(newImage);
            document.getElementById("new-floorplan").src = url;

            var reader = new FileReader();
            reader.onload = function() {
              var b64 = reader.result;
              console.log(b64);
              floorDetails = b64;
            };
            reader.readAsDataURL(newImage);
            reinitializeMapster();
          });
        } catch (error) {}

      }
    </script>
    <script>
      let namelist = []; // check if name is already in use

      function createRadio() {
        //document.querySelector("map").innerHTML = "";
        var radioGroup = document.createElement("div");
        radioGroup.classList.add("row", "m-3");

        var col1 = document.createElement("div");
        col1.classList.add("col-1");

        var col2 = document.createElement("div");
        col2.classList.add("col");


        var col3 = document.createElement("div");
        col3.classList.add("col");

        var col4 = document.createElement("div");
        col4.classList.add("col");

        var col5 = document.createElement("div");
        col5.classList.add("col", "text-end");

        var radioInput = document.createElement("input");
        radioInput.type = "radio";
        radioInput.name = "zone";

        radioInput.addEventListener("click", function() {
          if (radioInput.id === "") {
            alert("Please enter and confirm a name first.");
            radioInput.checked = false;
            return;
          }
        });
        zoneCounter++;

        var inputName = document.createElement("input");
        inputName.type = "text";
        inputName.placeholder = "Enter name";
        inputName.classList.add("form-control");


        var shapeSelect = document.createElement("select");
        shapeSelect.classList.add("form-select");
        shapeSelect.id = "shapeSelect";

        var rectOption = document.createElement("option");
        rectOption.value = "rect";
        rectOption.innerText = "Rectangle";

        var polyOption = document.createElement("option");
        polyOption.value = "poly";
        polyOption.innerText = "Polygon";

        shapeSelect.appendChild(rectOption);
        shapeSelect.appendChild(polyOption);



        var confirmButton = document.createElement("button");
        confirmButton.type = "button";
        confirmButton.classList.add("btn", "btn-success");
        confirmButton.innerText = "Confirm Name";
        confirmButton.addEventListener("click", function() {
          if (inputName.value === "") {
            alert("Please enter a name before confirming.");
            return;
          }
          if (namelist.includes(inputName.value)) {
            alert("Name already in use. Please enter a different name.");
            return;
          }
          console.log("confirm pressed")
          inputName.readOnly = true;
          radioInput.id = inputName.value;
          radioInput.value = inputName.value;
          radioInput.setAttribute("data-shape", shapeSelect.value);
          namelist.push(inputName.value);
          confirmButton.remove();
          shapeSelect.disabled = true;
        });



        var deleteButton = document.createElement("button");
        deleteButton.type = "button";
        deleteButton.classList.add("btn", "btn-danger");
        deleteButton.innerText = "Delete";
        deleteButton.addEventListener("click", function() {
          radioGroup.remove();
          var zoneName = radioInput.value;
          namelist.splice(namelist.indexOf(zoneName), 1);
          //document.querySelector("map").innerHTML = "";
          delete zones[zoneName];
          createArea(zones, "shadeCanvas");
        });

        col1.appendChild(radioInput);
        col2.appendChild(inputName);
        col3.appendChild(confirmButton);
        col4.appendChild(shapeSelect);
        col5.appendChild(deleteButton);

        radioGroup.appendChild(col1);
        radioGroup.appendChild(col2);
        radioGroup.appendChild(col4);
        radioGroup.appendChild(col3);
        radioGroup.appendChild(col5);

        $("#zoneList").append(radioGroup);
      }
      createRadio();
      var zoneCounter = 1;
      $("#addZone").on("click", () => {
        reinitializeMapster();
        createRadio();
        createArea(zones, "shadeCanvas");
      })
      $("#zoneList").on("change", "input[name='zone']", function() {
        console.log($(this).val());
      });

      $(function() {
        var newFloorOption = document.createElement("option");
        newFloorOption.value = "newFloor";
        newFloorOption.innerText = "New Floor";
        $("#floorSelector").append(newFloorOption);
      });

      $("#new-floorplan").on("click", function(event) {
        var coords = {
          x: event.offsetX,
          y: event.offsetY
        };
        //check if a zone is selected and load shapes and name
        try {
          var selectedZone = document.querySelector("input[name='zone']:checked").getAttribute("id");
          var shape = document.querySelector("input[name='zone']:checked").getAttribute("data-shape");
        } catch (error) {
          alert("Please select a zone.");
          return;
        }
        var canvas = document.getElementById("shadeCanvas");
        var ctx = canvas.getContext("2d");
        ctx.fillstyle = "black";
        console.log(selectedZone, shape, coords);
        if (shape = "rect") {
          if (zones[selectedZone] == null) {
            zones[selectedZone] = {
              name: selectedZone,
              shape: shape,
              startX: coords.x,
              startY: coords.y,
              orginalMapwidth: document.getElementById("new-floorplan").naturalWidth,
              orginalMapheight: document.getElementById("new-floorplan").naturalHeight,
              orginalImageWidth: document.getElementById("shadeCanvas").width,
              orginalImageHeight: document.getElementById("shadeCanvas").height
            };
            ctx.beginPath();
            ctx.arc(coords.x, coords.y, 2, 0, 2 * Math.PI);
            ctx.fillStyle = "black";
            ctx.fill();
            ctx.closePath();
          } else if (zones[selectedZone].endX == null) {
            zones[selectedZone].endX = coords.x;
            zones[selectedZone].endY = coords.y;
            ctx.beginPath();
            ctx.arc(coords.x, coords.y, 2, 0, 2 * Math.PI);
            ctx.fillStyle = "black";
            ctx.fill();
            ctx.closePath();
            createArea();
          }


        }
        reinitializeMapster();
      })




      $("#submit").click(async function() {
        if (!document.getElementById("floorLevel").value) {
          alert("Please enter a floor name before submitting.");
          return;
        }
        floorlevel = document.getElementById("floorLevel").value;
        socket.emit("getFloorNames")
        await socket.on("floorNames", function(data) {
          console.log(data);
          if (data.data.find((floor) => floor.floorlevel == floorlevel)) {
            alert("Floor already exists. Please enter a different floor level.");
            return;
          }
        })
        if (floorDetails == null || zones == null) {
          alert("Please upload a floorplan and create zones before submitting.");
          return;
        }

        if (confirm("Are you sure you want to submit?")) {
          var data = {};
          data.floorplan = floorDetails;
          data.zones = zones;
          data.floorlevel = floorlevel;


          socket.emit("floorplan", data, {});
          window.location.href = "/floorview";
        } else {
          return;
        }
      });


      $(document).ready(() => {
        $("#clear").on("click", () => {
          location.reload();
        })
      })
    </script>
  </body>