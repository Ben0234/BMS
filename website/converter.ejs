<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>DWG to JPEG Conversion</title>
  <link href="./converterStyle.css" rel="stylesheet" />
  <%-include("./header")%>
</head>

<body>
  <button type="button" class="btn btn-primary mt-5 ms-3" data-bs-toggle="modal" data-bs-target="#uploadModal">
    upload floorplan
  </button>
  <button type="button" class="btn btn-info mt-5" style="margin-left: 450px !important" id="clear">
    clear
  </button>

  <!-- Modal -->
  <div class="modal fade flex" id="uploadModal" tabindex="-1" aria-labelledby="uploadModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="uploadModalLabel">
            FloorPlan import
          </h1>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div>
            <div class="flex">
              <input type="file" id="fileInput" accept=".pdf" />
              Page Number:
              <input type="number" id="pageNumber" onchange="convertTojpg()" />
              <div class="justify-content-end"></div>
              <img src="#" class="mt-3" alt="upload Image" id="picture" />
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <div class="hstack">
            <div class="hstack gap-3">
              <button class="btn btn-warning" id="rotateLeft">
                rotate left
              </button>
              <button id="rotateRight" class="btn btn-warning">
                rotate Right
              </button>
            </div>
          </div>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="cropImage()">
            Close
          </button>
        </div>
      </div>
    </div>
  </div>
  <!--table-->
  <div class="table">
    <div class="row">
      <div class="col-6">
        <div>
          <div class=" ms-5 mt-5">
            <img id="new-floorplan" class="p-6 m-6" src="https://placehold.co/600x400" usemap="#imagemap" style=" position: absolute" />
            <canvas id="shadeCanvas" style="
                 position: relative;
                 background-color: rgba(255, 0, 0, 0);
                 height: 400px;
                 width: 600px;
                 z-index: -5;
               "></canvas>
            <map name="imagemap" id="imagemap" class="opacity">
              <area shape="rect" coords="0,0,100,100" />
            </map>
            <div class="table border border-black" style="position: absoulte;height: 40vh; overflow-y: scroll;">
              <div class="row m-3 sticky-top" style="background-color: white;">
                <div class="col">
                  <b style="font-size: 20px;"> Zones: </b>
                </div>
                <div class="col text-end">
                  <button id="addZone" class="btn btn-secondary">+ </button>
                </div>
              </div>
              <div id="zoneList" class="p-3"></div>
              <div class="row m-3">
                <div class="col-6"></div>
                <div id="buttonHolder">
                  <div class="row m-3">
                    <div class="col flex ">
                      <input class="btn btn-secondary" type="button" style="width: 200px" value="submit" id="submit" />
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div>

            </div>
          </div>
        </div>


      </div>
    </div>

  </div>
  </div>
  <!--end of table-->
  <!--upload modal scripts-->
  <script>
    $("img").mapster();
    var zonelist;
    var imageData;
    var zoneLevel = 1;
    var floor = zoneLevel.value;

    function reinitializeMapster() {
      $("img").mapster(
        (options = {
          stroke: true,
          fillColor: "222222",
          fillOpacity: 0.3,
          singleSelect: true,
        })
      );
    }
    var el = document.getElementById("picture");
    var vanilla = new Croppie(el, {
      viewport: {
        width: 600,
        height: 400
      },
      boundary: {
        width: 1000,
        height: 800
      },
      showZoomer: true,
      enableResize: false,
      enableOrientation: true,
    });
    var newImage;
    $(".cr-slider").attr({
      min: 0.5,
      max: 4.0
    });

    //ties new image to variable newImage to be use when modal closes
    function cropImage() {
      vanilla
        .result({
          type: "blob", // Use canvas for better quality
          size: "viewport", // Use original size of the cropped image
        })
        .then(function(croppedImage) {
          newImage = croppedImage;
        });
    }
    $("#rotateLeft").click(function() {
      vanilla.rotate(-90);
    });
    $("#rotateRight").click(function() {
      vanilla.rotate(90);
    });
    $("#upload").click(function() {
      floorDetails = {
        zones: {}
      };

      console.log("uploading");
      convertTojpg();
    });

    function convertTojpg() {
      var fileInput = document.getElementById("fileInput");
      var pageNumberInput = document.getElementById("pageNumber");
      var pageNumber = parseInt(pageNumberInput.value);
      var file = fileInput.files[0];

      var url = URL.createObjectURL(file);
      var pdf = new pdfjsLib.getDocument(url);
      pdf.promise.then(function(pdf) {
        console.log("Number of pages: " + pdf.numPages);

        pdf.getPage(pageNumber).then(function(page) {
          var viewport = page.getViewport({
            scale: 1
          });
          var canvas = document.createElement("canvas");
          var context = canvas.getContext("2d");
          canvas.height = viewport.height;
          canvas.width = viewport.width;

          var renderContext = {
            canvasContext: context,
            viewport: viewport,
          };
          var renderTask = page.render(renderContext);

          renderTask.promise.then(function() {
            var imageData = canvas.toDataURL("image/jpeg");
            // Use the imageData as needed
            console.log(imageData);
            uploadImage(imageData);
          });
        });
      });
    }

    function uploadImage(imageData) {
      try {
        var imageBase64 = imageData; //image data base 64
        imageView = document.getElementById("picture");
        picture.setAttribute("src", imageBase64);
        reinitializeMapster();

        vanilla.bind({
          url: imageBase64,
        });
        $("#uploadModal").off("hidden.bs.modal");
        $("#uploadModal").on("hidden.bs.modal", function() {
          floorDetails = {};
          var url = URL.createObjectURL(newImage);
          document.getElementById("new-floorplan").src = url;

          var reader = new FileReader();
          reader.onload = function() {
            var b64 = reader.result;
            console.log(b64);
            floorDetails = {
              floorplan: b64,
              zones: {}
            };
          };
          reader.readAsDataURL(newImage);
          reinitializeMapster();
        });
      } catch (error) {}
      console.log(newImage);
    }
  </script>
  <!--zone creation scripts-->

  <script>
    let zones = {};
    let namelist = []; // check if name is already in use

    function createRadio() {
      var radioGroup = document.createElement("div");
      radioGroup.classList.add("row", "m-3");

      var col1 = document.createElement("div");
      col1.classList.add("col-1");

      var col2 = document.createElement("div");
      col2.classList.add("col");

      var col3 = document.createElement("div");
      col3.classList.add("col");

      var col4 = document.createElement("div");
      col4.classList.add("col", "text-end");

      var radioInput = document.createElement("input");
      radioInput.type = "radio";
      radioInput.name = "zone";
      radioInput.value = "zone" + zoneCounter;

      radioInput.addEventListener("click", function() {
        if (radioInput.id === "") {
          alert("Please enter and confirm a name first.");
          radioInput.checked = false;
          return;
        }
      });
      zoneCounter++;

      var inputName = document.createElement("input");
      inputName.type = "text";
      inputName.placeholder = "Enter name";
      inputName.classList.add("form-control");


      var confirmButton = document.createElement("button");
      confirmButton.type = "button";
      confirmButton.classList.add("btn", "btn-success");
      confirmButton.innerText = "Confirm Name";
      confirmButton.addEventListener("click", function() {
        if (inputName.value === "") {
          alert("Please enter a name before confirming.");
          return;
        }
        if (namelist.includes(inputName.value)) {
          alert("Name already in use. Please enter a different name.");
          return;
        }
        console.log("confirm pressed")
        inputName.readOnly = true;
        radioInput.id = inputName.value;
        radioInput.value = inputName.value;
        namelist.push(inputName.value);
        confirmButton.remove()
      });


      var deleteButton = document.createElement("button");
      deleteButton.type = "button";
      deleteButton.classList.add("btn", "btn-danger");
      deleteButton.innerText = "Delete";
      deleteButton.addEventListener("click", function() {
        radioGroup.remove();
        var zoneName = radioInput.value;
        var index = zones.findIndex(zone => zone.name == zoneName);
        if (index !== -1) {
          zones.splice(index, 1);
        }
        var index = namelist.indexOf(zoneName);
        if (index !== -1) {
          namelist.splice(index, 1);
        }
      });

      col1.appendChild(radioInput);
      col2.appendChild(inputName);
      col3.appendChild(confirmButton);
      col4.appendChild(deleteButton);

      radioGroup.appendChild(col1);
      radioGroup.appendChild(col2);
      radioGroup.appendChild(col3);
      radioGroup.appendChild(col4);

      $("#zoneList").append(radioGroup);
    }
    createRadio();
    var zoneCounter = 1;
    $("#addZone").on("click", () => {
      createRadio();

    })
    $("#zoneList").on("change", "input[name='zone']", function() {
      console.log($(this).val());
    });

    $(function() {
      var newFloorOption = document.createElement("option");
      newFloorOption.value = "newFloor";
      newFloorOption.innerText = "New Floor";
      $("#floorSelector").append(newFloorOption);
    });

    $("#new-floorplan").on("click", () => {

      rec = document.getElementById("new-floorplan").getBoundingClientRect();
      var x = event.clientX - rec.left;
      var y = event.clientY - rec.top;


      var selectedZone = document.querySelector("input[name='zone']:checked");

      if (!selectedZone) {
        alert("Please select a zone before proceeding.");
        return;
      }

      if (zones[selectedZone.value] && zones[selectedZone.value].startX && !zones[selectedZone.value].endX) {
        zones[selectedZone.value].endX = x;
        zones[selectedZone.value].endY = y;
      } else if (!zones[selectedZone.value] || !zones[selectedZone.value].startX) {
        zones[selectedZone.value] = {
          startX: x,
          startY: y
        };

      }

      try {
        var shadecanvas = document.getElementById("shadeCanvas");
        var ctx = shadecanvas.getContext("2d");

        ctx.beginPath();
        var rect = shadecanvas.getBoundingClientRect();
        var x = event.clientX - rect.left;
        var y = event.clientY - rect.top;
        ctx.rect(x, y, 10, 10);
        ctx.fillStyle = "red";
        ctx.fill();
        ctx.closePath();
        console.log("marked")
      } catch (error) {
        console.log(error);
      }




    })


    $("#submit").click(function() {
      //submit code to be added here
    });
  </script>
</body>

</html>