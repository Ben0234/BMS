<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>DWG to JPEG Conversion</title>
  <%-include("./header")%>
  <link href="./stylesheet.css" rel="stylesheet" />
</head>

<div class="modal fade flex" id="uploadModal" tabindex="-1" aria-labelledby="uploadModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="uploadModalLabel">
          FloorPlan import
        </h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div>
          <div>
            <input type="file" id="fileInput" accept=".pdf" class="btn" />
            Page Number:
            <input type="number" id="pageNumber" onchange="convertTojpg()" />
            <br>
            <img src="#" class="mt-3" alt="upload Image" id="picture" />
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <div class="hstack">
          <div class="hstack gap-3">
            <button class="btn btn-warning" id="rotateLeft">
              rotate left
            </button>
            <button id="rotateRight" class="btn btn-warning">
              rotate Right
            </button>
          </div>
        </div>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="cropImage()">
          Close
        </button>
      </div>
    </div>
  </div>
</div>

<body>
  <div class="table mt-3 ms-3">
    <div class="row">

      <div class="col-6">

        <div class="d-flex justify-content-center align-items-center">
          <div class="col text-start">
            <button type="button" class="btn btn-primary mt-5" data-bs-toggle="modal" data-bs-target="#uploadModal">
              upload floorplan
            </button>
          </div>
          <div class="col text-center mt-5">
            Floor Name:
            <input type="text" id="floorLevel" />
          </div>
          <div class="col text-end">
            <button type="button" class="btn btn-primary mt-5" id="clear">
              clear
            </button>
          </div>
        </div>
        <div class="position-relative transparent">
          <canvas class="p-0" id="shadeCanvas" style="position: absolute; z-index: -1;  "></canvas>
          <img src="https://placehold.co/600x400" alt="" id="new-floorplan" style="position: absolute; top: 0; left: 0;" usemap="#testmap" />
        </div>


      </div>


      <div class="col-6 pt-5">
        <!-- table col-->
        <div class="table border border-black" style="position: absoulte;height: 80vh; overflow-y: scroll;">
          <div class="row m-3 sticky-top" style="background-color: white;">
            <div class="col">
              <b style="font-size: 20px;"> Zones: </b>
            </div>
            <div class="col text-end">
              <button id="addZone" class="btn btn-secondary">+ </button>
            </div>
          </div>
          <div id="zoneList" class="p-3"></div>
          <div class="row m-3">
            <div id="buttonHolder">
              <div class="row m-3 flex justify-content-end">
                <input class="btn btn-primary" type="button" style="width: 200px" value="submit" id="submit" />
              </div>
            </div>
          </div>
        </div>
      </div>

    </div>
  </div>
  <map name="testmap">
    <area shape="rect" coords="0,0,50,50" href="page1.html" alt="Area 1">
    <area shape="circle" coords="100,100,50" href="page2.html" alt="Area 2">
    <area shape="poly" coords="200,200,250,250,200,300" href="page3.html" alt="Area 3">
  </map>


  <script>
    var zonelist;
    var imageData;
    var zoneLevel = 1;
    var zones = {};
    var floor = zoneLevel.value;

    function createZone(zones, canvasID) {
      canvas = document.getElementById(canvasID);
      ctx = canvas.getContext("2d");
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      for (zone in zones) {
        if (zones[zone].shape == "rect") {
          ctx.fillStyle = "rgba(0, 0, 0, 0.5)";
          if (zones[zone].shape == "rect") {
            var area = document.createElement("area");
            area.setAttribute("shape", "rect");
            area.setAttribute("coords", zones[zone].startX + "," + zones[zone].startY + "," + zones[zone].endX + "," + zones[zone].endY);
            var startX = zones[zone].startX * (canvas.width / zones[zone].orginalwidth);
            var startY = zones[zone].startY * (canvas.height / zones[zone].orginalheight);
            var endX = zones[zone].endX * (canvas.width / zones[zone].orginalwidth);
            var endY = zones[zone].endY * (canvas.height / zones[zone].orginalheight);
            var area = document.createElement("area");
            area.setAttribute("shape", "rect");
            area.setAttribute("coords", zones[zone].startX + "," + zones[zone].startY + "," + zones[zone].endX + "," + zones[zone].endY);
            area.setAttribute("ID", zones[zone].name);
            area.setAttribute("href", "#");
            document.querySelector("map").appendChild(area);



            ctx.fillStyle = "rgb(255, 0, 0)";
            ctx.beginPath();
            if (endX > startX) {
              var width = Math.abs(endX - startX);
              if (endY > startY) {
                var height = Math.abs(endY - startY);
                ctx.rect(startX, startY, width, height);
              } else {
                var height = Math.abs(startY - endY);
                ctx.rect(startX, endY, width, height);
              }
            } else {
              var width = Math.abs(startX - endX);
              if (endY > startY) {
                var height = Math.abs(endY - startY);
                ctx.rect(endX, startY, width, height);
              } else {
                var height = Math.abs(startY - endY);
                ctx.rect(endX, endY, width, height);
              }
            }
            ctx.fill();
          } else if (shape == poly) {
            console.log("poly to be done")
          }
        }
      }
    }


    function reinitializeMapster() {
      $("img").mapster(
        (options = {
          enableAutoResizeSupport: true,
          autoResize: true,
          stroke: true,
          fillColor: "222222",
          singleSelect: true,
          mapKey: "id",
          onClick: function(e) {

            $("input[name='zone']").prop("checked", false);
            $("input[name='zone'][id='" + zones[e.key].name + "']").prop(
              "checked",
              true
            );
          },
          onAutoResize: function() {
            try {
              var image = document.getElementById("new-floorplan");
              var width = image.clientWidth;
              var height = image.clientHeight;
              var canvas = document.getElementById("shadeCanvas");
              canvas.width = width;
              canvas.height = height;
            } catch (error) {
              console.log(error);
            }
            createZone(zones, "shadeCanvas");
          }
        })
      );
      $("#mapster_el").css("opacity", "0.5");
    }
    reinitializeMapster();
    var el = document.getElementById("picture");
    var vanilla = new Croppie(el, {
      viewport: {
        width: 600,
        height: 400
      },
      boundary: {
        width: 1000,
        height: 800
      },
      showZoomer: true,
      enableResize: false,
      enableOrientation: true,
    });
    var newImage;
    $(".cr-slider").attr({
      min: 0.5,
      max: 4.0
    });

    function cropImage() {
      vanilla
        .result({
          type: "blob",
          size: "viewport", // Use original size of the cropped image
        })
        .then(function(croppedImage) {
          newImage = croppedImage;
        });
    }
    $("#rotateLeft").click(function() {
      vanilla.rotate(-90);
    });
    $("#rotateRight").click(function() {
      vanilla.rotate(90);
    });
    $("#upload").click(function() {



      console.log("uploading");
      convertTojpg();
    });

    function convertTojpg() {
      var fileInput = document.getElementById("fileInput");
      var pageNumberInput = document.getElementById("pageNumber");
      var pageNumber = parseInt(pageNumberInput.value);
      var file = fileInput.files[0];

      var url = URL.createObjectURL(file);
      var pdf = new pdfjsLib.getDocument(url);
      pdf.promise.then(function(pdf) {
        console.log("Number of pages: " + pdf.numPages);

        pdf.getPage(pageNumber).then(function(page) {
          var viewport = page.getViewport({
            scale: 1
          });
          var canvas = document.createElement("canvas");
          var context = canvas.getContext("2d");
          canvas.height = viewport.height;
          canvas.width = viewport.width;

          var renderContext = {
            canvasContext: context,
            viewport: viewport,
          };
          var renderTask = page.render(renderContext);

          renderTask.promise.then(function() {
            var imageData = canvas.toDataURL("image/jpeg");
            // Use the imageData as needed
            console.log(imageData);
            uploadImage(imageData);
          });
        });
      });
    }

    function uploadImage(imageData) {
      try {
        var imageBase64 = imageData; //image data base 64
        imageView = document.getElementById("picture");
        picture.setAttribute("src", imageBase64);
        reinitializeMapster();

        vanilla.bind({
          url: imageBase64,
        });
        $("#uploadModal").off("hidden.bs.modal");
        $("#uploadModal").on("hidden.bs.modal", function() {
          floorDetails = {};
          var url = URL.createObjectURL(newImage);
          document.getElementById("new-floorplan").src = url;

          var reader = new FileReader();
          reader.onload = function() {
            var b64 = reader.result;
            console.log(b64);
            floorDetails = b64;
          };
          reader.readAsDataURL(newImage);
          reinitializeMapster();
        });
      } catch (error) {}

    }
  </script>
  <script>
    let namelist = []; // check if name is already in use

    function createRadio() {
      document.querySelector("map").innerHTML = "";
      var radioGroup = document.createElement("div");
      radioGroup.classList.add("row", "m-3");

      var col1 = document.createElement("div");
      col1.classList.add("col-1");

      var col2 = document.createElement("div");
      col2.classList.add("col");


      var col3 = document.createElement("div");
      col3.classList.add("col");

      var col4 = document.createElement("div");
      col4.classList.add("col");

      var col5 = document.createElement("div");
      col5.classList.add("col", "text-end");

      var radioInput = document.createElement("input");
      radioInput.type = "radio";
      radioInput.name = "zone";
      radioInput.value = "zone" + zoneCounter;

      radioInput.addEventListener("click", function() {
        if (radioInput.id === "") {
          alert("Please enter and confirm a name first.");
          radioInput.checked = false;
          return;
        }
      });
      zoneCounter++;

      var inputName = document.createElement("input");
      inputName.type = "text";
      inputName.placeholder = "Enter name";
      inputName.classList.add("form-control");


      var shapeSelect = document.createElement("select");
      shapeSelect.classList.add("form-select");
      shapeSelect.id = "shapeSelect";

      var rectOption = document.createElement("option");
      rectOption.value = "rect";
      rectOption.innerText = "Rectangle";

      var polyOption = document.createElement("option");
      polyOption.value = "poly";
      polyOption.innerText = "Polygon";

      shapeSelect.appendChild(rectOption);
      shapeSelect.appendChild(polyOption);



      var confirmButton = document.createElement("button");
      confirmButton.type = "button";
      confirmButton.classList.add("btn", "btn-success");
      confirmButton.innerText = "Confirm Name";
      confirmButton.addEventListener("click", function() {
        if (inputName.value === "") {
          alert("Please enter a name before confirming.");
          return;
        }
        if (namelist.includes(inputName.value)) {
          alert("Name already in use. Please enter a different name.");
          return;
        }
        console.log("confirm pressed")
        inputName.readOnly = true;
        radioInput.id = inputName.value;
        radioInput.value = inputName.value;
        radioInput.setAttribute("data-shape", shapeSelect.value);
        namelist.push(inputName.value);
        confirmButton.remove();
        shapeSelect.disabled = true;
      });



      var deleteButton = document.createElement("button");
      deleteButton.type = "button";
      deleteButton.classList.add("btn", "btn-danger");
      deleteButton.innerText = "Delete";
      deleteButton.addEventListener("click", function() {
        radioGroup.remove();
        var zoneName = radioInput.value;
        namelist.splice(namelist.indexOf(zoneName), 1);
        document.querySelector("map").innerHTML = "";
        delete zones[zoneName];
        createShadenArea();
      });

      col1.appendChild(radioInput);
      col2.appendChild(inputName);
      col3.appendChild(confirmButton);
      col4.appendChild(shapeSelect);
      col5.appendChild(deleteButton);

      radioGroup.appendChild(col1);
      radioGroup.appendChild(col2);
      radioGroup.appendChild(col4);
      radioGroup.appendChild(col3);
      radioGroup.appendChild(col5);

      $("#zoneList").append(radioGroup);
    }
    createRadio();
    var zoneCounter = 1;
    $("#addZone").on("click", () => {
      createRadio();
      createShadenArea();

    })
    $("#zoneList").on("change", "input[name='zone']", function() {
      console.log($(this).val());
    });

    $(function() {
      var newFloorOption = document.createElement("option");
      newFloorOption.value = "newFloor";
      newFloorOption.innerText = "New Floor";
      $("#floorSelector").append(newFloorOption);
    });

    $("#new-floorplan").on("click", (event) => {
      var canvas = document.getElementById("shadeCanvas");
      var ctx = canvas.getContext("2d");
      var floorplan = document.getElementById("new-floorplan");

      var x = event.offsetX;
      var y = event.offsetY;
      console.log(x, y);

      try {
        var selectedZone = document.querySelector("input[name='zone']:checked").getAttribute("id");
        var shape = document.querySelector("input[name='zone']:checked").getAttribute("data-shape");
      } catch (error) {
        alert("Please select a zone.");
        return;
      }
      if (shape == "rect") {
        if (!zones[selectedZone]) {
          zones[selectedZone] = {
            shape: "rect",
            startX: x,
            startY: y,
            orginalwidth: floorplan.width,
            orginalheight: floorplan.height,
          }
          ctx.fillStyle = "rgb(0, 0, 0)";
          ctx.beginPath();
          ctx.arc(x, y, 2, 0, 2 * Math.PI);
          ctx.fill();
        } else if (!zones[selectedZone].endX) {
          zones[selectedZone].endX = x;
          zones[selectedZone].endY = y;
        }
        if (zones[selectedZone].endX) {
          var canvasID = "shadeCanvas";
          var mapID = "testmap";
          createZone(zones, canvasID);
          return;
        }
      }
      if (shape == "poly") {
        if (!zones[selectedZone]) {
          zones[selectedZone] = {
            shape: "poly",
            xCoords: [x],
            yCoords: [y],
            complete: false,
            orginalheight: floorplan.height,
            orginalwidth: floorplan.width,
          }
          var complete = false;
          ctx.fillStyle = "rgb(0, 0, 0)";
          ctx.beginPath();
          ctx.arc(x, y, 2, 0, 2 * Math.PI);
          ctx.fill();
        }
        if (!zones[selectedZone].complete) {
          if (zones[selectedZone].complete == false) {
            if (x < zones[selectedZone].xCoords[0] + 10 &&
              x > zones[selectedZone].xCoords[0] - 10 &&
              y < zones[selectedZone].yCoords[0] + 10 &&
              y > zones[selectedZone].yCoords[0] - 10 && zones[selectedZone].xCoords.length > 1) {
              x = zones[selectedZone].xCoords[0];
              y = zones[selectedZone].yCoords[0];
              zones[selectedZone].shape = "poly";
              zones[selectedZone].complete = true;

            }
            zones[selectedZone].xCoords.push(x);
            zones[selectedZone].yCoords.push(y);
            ctx.beginPath();
              ctx.arc(x, y, 2, 0, 2 * Math.PI);
              ctx.fill();
            if (zones[selectedZone].complete) {
              createZone();
            }
          }
        }

      }

      console.log(shape);

    })


    function createZone(zones, canvasID) {
      canvas = document.getElementById(canvasID);
      ctx = canvas.getContext("2d");
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      for (zone in zones) {
        if (zones[zone].shape == "rect") {
          ctx.fillStyle = "rgba(0, 0, 0, 0.5)";
          if (zones[zone].shape == "rect") {
            var area = document.createElement("area");
            area.setAttribute("shape", "rect");
            area.setAttribute("coords", zones[zone].startX + "," + zones[zone].startY + "," + zones[zone].endX + "," + zones[zone].endY);
            var startX = zones[zone].startX * (canvas.width / zones[zone].orginalwidth);
            var startY = zones[zone].startY * (canvas.height / zones[zone].orginalheight);
            var endX = zones[zone].endX * (canvas.width / zones[zone].orginalwidth);
            var endY = zones[zone].endY * (canvas.height / zones[zone].orginalheight);
            var area = document.createElement("area");
            area.setAttribute("shape", "rect");
            area.setAttribute("coords", zones[zone].startX + "," + zones[zone].startY + "," + zones[zone].endX + "," + zones[zone].endY);
            area.setAttribute("ID", zones[zone].name);
            area.setAttribute("href", "#");
            document.querySelector("map").appendChild(area);



            ctx.fillStyle = "rgb(255, 0, 0)";
            ctx.beginPath();
            if (endX > startX) {
              var width = Math.abs(endX - startX);
              if (endY > startY) {
                var height = Math.abs(endY - startY);
                ctx.rect(startX, startY, width, height);
              } else {
                var height = Math.abs(startY - endY);
                ctx.rect(startX, endY, width, height);
              }
            } else {
              var width = Math.abs(startX - endX);
              if (endY > startY) {
                var height = Math.abs(endY - startY);
                ctx.rect(endX, startY, width, height);
              } else {
                var height = Math.abs(startY - endY);
                ctx.rect(endX, endY, width, height);
              }
            }
            ctx.fill();
          } else if (shape == poly) {
            ctx.fillStyle = "rgba(255, 0, 0, )";

          }
        }
      }
    }



    $("#submit").click(async function() {
      if (!document.getElementById("floorLevel").value) {
        alert("Please enter a floor name before submitting.");
        return;
      }
      floorlevel = document.getElementById("floorLevel").value;
      socket.emit("getFloorNames")
      await socket.on("floorNames", function(data) {
        console.log(data);
        if (data.data.find((floor) => floor.floorlevel == floorlevel)) {
          alert("Floor already exists. Please enter a different floor level.");
          return;
        }
      })
      if (floorDetails == null || zones == null) {
        alert("Please upload a floorplan and create zones before submitting.");
        return;
      }

      if (confirm("Are you sure you want to submit?")) {
        var data = {};
        data.floorplan = floorDetails;
        data.zones = zones;
        data.floorlevel = floorlevel;


        socket.emit("floorplan", data, {});
        window.location.href = "/floorview";
      } else {
        return;
      }
    });

    $(document).ready(() => {
      $("#clear").on("click", () => {
        location.reload();
      })
    })
  </script>
</body>