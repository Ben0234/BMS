<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <%- include('header') %>
  <link rel="stylesheet" href="./stylesheet.css">

</head>

<body>
  <div class="table">
    <div class="row title">
      <div class="col text-center">
        Floorview <span style="color:red; background-color: rgba(127, 255, 212, 0); ">ðŸŸ¢ðŸ”´âšª</span>
      </div>
      <div class="col text-center">
        temperature Details
      </div>
      <div class="col text-center" id="moreDetailTitle">
        Zone Details
      </div>
    </div>
    <div class="row">
      <div class="col-8">
        <div class="table">
          <div class="row">
            <div class="col">
              <div class="row" style="height: 44vh;background-color: rgba(240, 248, 255, 0); overflow-y:scroll">
                <div class="col-6 m-4">
                  <canvas class="p-0" id="shadeCanvas" style="position: absolute; z-index: -1;  "></canvas>
                  <img src="https://placehold.co/600x400" alt="" id="floorplan" style="position: absolute; top: 0; left: 0;" usemap="#testmap" />
                </div>
                <div class="col m-3">
                  <div class="table placeholder-text" id="gaugeTable">
                    -click on a zone to view details-
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="row title mt-3">
            <div class="col text-center">
              Energy Use
            </div>
            <div class="col text-center">
              Total Energy used Current Month
            </div>
          </div>
          <div class="row">
            <div class="col ">
              <div class="row ">
                <div class="col">
                  <input type="date" id="datepicker" class="form-control" value="<%= new Date().toISOString().split('T')[0] %>">
                  <!-- '2023-06-21T00:00:00.000Z' split at-->
                </div>
                <div class="col">
                  <select id="timeGranularity" class="form-control select">
                    <option value="day">Day</option>
                    <option value="week">Week</option>
                    <option value="month">Month</option>
                    <option value="year">Year</option>
                  </select>
                </div>

              </div>

              <canvas id="energyChart"> </canvas>
            </div>
            <div class="col d-flex justify-content-center">
              <div class="mt-3 d-flex meter">

                <!-- meter -->
                <div class="container Energy-meter " id="energyMeter">
                  748kwh
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col m-2" style="overflow-y:scroll; height: 90vh;" id="moreDetails"></div>
    </div>
    <div class="offcanvas offcanvas-bottom" tabindex="-1" id="offcanvas" aria-labelledby="offcanvasLabel">
      <div class="offcanvas-header alert-text">
        Alerts
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
      </div>
      <div class="offcanvas-body m-3" id="AlertMessages" style="overflow-y:s">
        <ul id="alertMessageList">

        </ul>
      </div>
    </div>

    <div class="fixed-bottom title ms-1 alert-text ps-3 m-0" id="warning">

      ^Alerts
    </div>
  </div>
  </div>
  <map name="testmap" id="testmap">
  </map>
  <!-- Modal -->
  <div id="infoModal" class="modal p-3" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Modal title</h5>
          <button class="btn btn-secondary" style="position: absolute; top: 10px; right: 10px" id="editButton">
            Edit
          </button>
        </div>
        <div class="modal-body">
          <p>Modal body text goes here.</p>
          <canvas id="tempChart"></canvas>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" onclick="closeModal()">
            Close
          </button>
        </div>
      </div>
    </div>
  </div>
  <script>
    //function 

    function monthNameToNumber(monthName) {
      // Mapping of month names to their respective numbers
      const monthMap = {
        "January": 1,
        "February": 2,
        "March": 3,
        "April": 4,
        "May": 5,
        "June": 6,
        "July": 7,
        "August": 8,
        "September": 9,
        "October": 10,
        "November": 11,
        "December": 12
      };

      // Convert the month name to its corresponding number
      return monthMap[monthName];
    }

    function daysInMonth(month, year) {
      return new Date(year, month + 1, 0).getDate();
    }
  </script>
  <script>
    var ejsData = <%- JSON.stringify(data) %>;
    var orginalSensorData = <%- JSON.stringify(sensorData) %>;
  </script>
  <script>
    var originalEnergyData = <%- JSON.stringify(energyData) %>;
  </script>
  <script>
    var alertCount = 0;
    var currentClickedZone;
    floorNames = []
    $("#floorSelector").empty();
    for (var data in ejsData) {
      var option = document.createElement('option');
      option.value = ejsData[data].floorlevel;
      option.text = ejsData[data].floorlevel; // Assuming you want to use the same value for the display text
      $("#floorSelector").append(option);
      floorNames.push(ejsData[data].floorlevel);
    }
    var energyData = {};

    function loadData() {
      // Clear alerts
      $("#alertMessageList").empty();

      if(document.getElementById("lastUpdatedTime")){
        document.getElementById("lastUpdatedTime").textContent = "Updated Time: " + new Date().toLocaleTimeString([], {
          hour: '2-digit',
          minute: '2-digit'
        });
      }


      floorlevel = $("#floorSelector").val();
      zones = ejsData.find(obj => obj.floorlevel == floorlevel).zones;
      try {
        var image = document.getElementById("floorplan");
        $(image).mapster('unbind');
        var floorplan = ejsData.find(obj => obj.floorlevel == floorlevel).floorplan;
        image.src = floorplan;
      } catch (error) {
        console.error("Error setting floorplan image:", error);
      }
      try {
        for (zone in zones) {
          var timestampTemperaturePairs = []; // Changed from timestampZonePairs
          for (data in orginalSensorData) {
            if (orginalSensorData[data].metaData.zone == zones[zone].name && orginalSensorData[data].metaData.floor == floorlevel) {
              timestampTemperaturePairs.push({
                floor: orginalSensorData[data].metaData.floor,
                zone: orginalSensorData[data].metaData.zone,
                temperature: orginalSensorData[data].temperature,
                timestamp: orginalSensorData[data].timestamp,
                setTemperature: orginalSensorData[data].setTemperature,
                upperMargin: orginalSensorData[data].setTemperature +
                  orginalSensorData[data].upperMargin,
                lowerMargin: orginalSensorData[data].setTemperature -
                  orginalSensorData[data].lowerMargin,
                humidity: orginalSensorData[data].humidity,
                status: orginalSensorData[data].Status,
              });
            }
          }
          sensorData[zones[zone].name] = timestampTemperaturePairs;
        }
      } catch (error) {
        console.error("Error setting sensor data:", error);
      }

      try {
        var timestampEnergyPairs = [];
        for (data in originalEnergyData) {
          if (originalEnergyData[data].metaData.floor == floorlevel) {
            timestampEnergyPairs.push({
              floor: originalEnergyData[data].metaData.floor,
              energy: originalEnergyData[data].energy,
              timestamp: originalEnergyData[data].timestamp
            });
          }
          floor = $('#floorSelector').val();
          energyData[floor] = timestampEnergyPairs;
        }
      } catch (error) {
        console.error("Error setting energy data:", error);
      }

    }
  </script>
  <script>
    var timestampTemperaturePairs = [];
    var zones;
    var imagemap = document.getElementById("testmap");
    var modal = document.getElementById("infoModal");
    var shadeCanvas = document.getElementById("shadeCanvas");
    var ctx = shadeCanvas.getContext("2d");
    var dynamicCharts = {};
    var image = document.querySelector("img");
    image.src = floorplan;
    var sensorData = {};
    loadData();
    socket.on("sensorData", function(data) {
      orginalSensorData = data.sensorData;
      console.log("received sensor data");
      alertCount = 0;
      loadData();
      createArea();
      if (currentClickedZone) {
        loadDetails(currentClickedZone);
      }
      updatetemperature();
    });
    socket.on("energyData", function(data) {
      originalEnergyData = data.energyData;
      alertCount = 0;
      loadData();
      createArea();
      updatetemperature();
      updateEnergy();
      loadEnergyChart()
      console.log("received energy data");
    });
    window.addEventListener("click", function(event) {
      if (event.target == modal) {
        closeModal();
      }
    });
    createArea();
    updatetemperature();

    function openModal() {
      modal.style.display = "block";
    }

    function closeModal() {
      document.getElementById("editButton").style.display = "block";
      var updateElement = document.getElementById("update");
      if (updateElement) {
        updateElement.remove();
      }

      modal.style.display = "none";
    }

    function createArea() {
      while (imagemap.firstChild) {
        imagemap.removeChild(imagemap.firstChild);
      }
      for (var zone in zones) {
        if (zones[zone].shape == "rect") {
          var coordinates = zones[zone];
          var area = document.createElement("area");

          area.setAttribute("shape", "rect");
          area.setAttribute(
            "coords",
            coordinates.startX +
            "," +
            coordinates.startY +
            "," +
            coordinates.endX +
            "," +
            coordinates.endY
          );
          area.setAttribute("href", "#");
          area.setAttribute("id", zones[zone].name);
          imagemap.appendChild(area);
        } else if (zones[zone].shape == "poly") {
          var coordinates = zones[zone];
          var area = document.createElement("area");

          area.setAttribute("shape", "poly");
          var coords = "";
          for (var i = 0; i < zones[zone].xCords.length; i++) {
            coords += zones[zone].xCords[i] + "," + zones[zone].yCords[i] + ",";
          }

          coords = coords.slice(0, -1);
          area.setAttribute("coords", coords);
          area.setAttribute("href", "#");
          area.setAttribute("id", zones[zone].name);
          imagemap.appendChild(area);
        }
      }
      $("img").mapster({
        showToolTip: true,
        mapKey: "id",
        singleSelect: true,
        fillOpacity: 0.2,
        enableAutoResizeSupport: true,
        autoResize: true,

        onClick: function(e) {
          loadDetails(e);

        },
      });
      try {
        var areaOptions = {
          key: zones[zone].name,
          toolTip: "temperature Set: " +
            sensorData[zones[zone].name][0].setTemperature +
            "C",
        };

        $("img").mapster("set_options", {
          areas: [{
            key: areaOptions.key,
            toolTip: areaOptions.toolTip,
          }],
        });
      } catch (error) {
        console.error("Error setting tooltip in ImageMapster:", error);
      }
    }

    function updatetemperature() {
      ctx.clearRect(0, 0, shadeCanvas.width, shadeCanvas.height);
      var temp;
      for (var zone in zones) {
        for (var data in sensorData) {
          if (sensorData[data].zone == zones[zone].name) {
            temp = sensorData[data].temperature;
          }
        }
        try {
          var areaOptions = {
            key: zones[zone].name,
            toolTip: "temperature Set: " +
              sensorData[zones[zone].name][0].setTemperature +
              "C",
          };

          $("img").mapster("set_options", {
            areas: [{
              key: areaOptions.key,
              toolTip: areaOptions.toolTip,
            }],
          });
        } catch (error) {
          console.error("Error setting tooltip in ImageMapster:", error);
        }
        if (zones[zone].shape == "rect") {
          var zonePosition = zones[zone];
          var startX = (zonePosition.startX / 600) * shadeCanvas.width;
          var startY = (zonePosition.startY / 400) * shadeCanvas.height;
          var endX = (zonePosition.endX / 600) * shadeCanvas.width;
          var endY = (zonePosition.endY / 400) * shadeCanvas.height;
        }
        try {
          var temperatureGradient =
            (sensorData[zones[zone].name][0].temperature -
              sensorData[zones[zone].name][0].lowerMargin) /
            (sensorData[zones[zone].name][0].upperMargin -
              sensorData[zones[zone].name][0].lowerMargin);
          var red = Math.round(255 * temperatureGradient);
          var blue = Math.round(255 * (1 - temperatureGradient));
          ctx.fillStyle = "rgba(" + red / 2 + ", 255, " + blue + ", 0.5)";
        } catch (error) {
          ctx.fillStyle = "rgba(128, 128, 128, 0.5)"; // Set fillStyle to grey
        }
        if (zones[zone].shape == "rect") {
          ctx.beginPath();
          if (endX > startX) {
            var width = Math.abs(endX - startX);
            if (endY > startY) {
              var height = Math.abs(endY - startY);
              ctx.rect(startX, startY, width, height);
            } else {
              var height = Math.abs(startY - endY);
              ctx.rect(startX, endY, width, height);
            }
          } else {
            var width = Math.abs(startX - endX);
            if (endY > startY) {
              var height = Math.abs(endY - startY);
              ctx.rect(endX, startY, width, height);
            } else {
              var height = Math.abs(startY - endY);
              ctx.rect(endX, endY, width, height);
            }
          }
          ctx.fill();
        } else if (zones[zone].shape == "poly") {
          var zonePosition = zones[zone];
          ctx.beginPath();
          ctx.moveTo(
            (zonePosition.xCords[0] / 600) * shadeCanvas.width,
            (zonePosition.yCords[0] / 400) * shadeCanvas.height
          );
          for (var i = 1; i < zonePosition.xCords.length; i++) {
            ctx.lineTo(
              (zonePosition.xCords[i] / 600) * shadeCanvas.width,
              (zonePosition.yCords[i] / 400) * shadeCanvas.height
            );
          }
          ctx.closePath();
          ctx.fill();
        }
      }
    }



    $("#editButton").click(function() {
      var name = modal.querySelector(".modal-title").textContent;
      modal.querySelector(".modal-title").textContent = "Edit " + modal.querySelector(".modal-title").textContent;
      modal.querySelector(".modal-header");
      document.getElementById("editButton").style.display = "none";
      var div = document.createElement("div");
      div.textContent = "set temp: ";
      var setTempInput = document.createElement("input");
      setTempInput.id = "setInput";
      setTempInput.type = "number";
      setTempInput.value =
        sensorData[name][0].setTemperature;

      var margin = document.createElement("div");
      margin.textContent = "margin: ";
      var marginInput = document.createElement("input");
      marginInput.id = "Margin";
      marginInput.type = "number";
      marginInput.value = (-(sensorData[name][0].setTemperature - sensorData[name][0].upperMargin));
      margin.appendChild(marginInput);

      var button = document.createElement("button");
      button.classList.add("btn", "ms-3", "btn-primary");
      button.textContent = "update";
      button.id = "update";
      button.addEventListener("click", function() {
        var newTemp = setTempInput.value;
        var newMargin = marginInput.value;
        socket.emit("change", {
          temperature: newTemp,
          margin: newMargin
        });
        modal.querySelector(".modal-footer").removeChild(button);
        closeModal();
      });
      modal.querySelector(".modal-body").innerHTML = "";
      modal.querySelector(".modal-body").appendChild(div);
      div.appendChild(setTempInput);
      div.appendChild(margin);
      modal.querySelector(".modal-footer").appendChild(button);
    });
    updatetemperature();
  </script>
  <script>
    $('#floorSelector').on('change', () => {
      document.getElementById("moreDetails").innerHTML = "-click on a zone to view details-";

      document.getElementById("gaugeTable").innerHTML = "-click on a zone to view details-";
      loadData();
      createArea();
      updatetemperature();
      dynamicCharts = {};
    })

    function loadTempChart(key) {
      var temp = [];
      var upper = [];
      var lower = [];
      var set = [];
      var labels = [];

      var dynamicChartName = "tempChart_" + key;
      var currentTime = new Date();


      // Get the sensor data for the given zone key
      var zoneData = sensorData[key];
      if (zoneData) {
        // Iterate over the sensor data and push to temp and labels arrays
        for (var i = 0; i < zoneData.length; i++) {
          temp.push(zoneData[i].temperature.toFixed(2));
          var tempTime = new Date(zoneData[i].timestamp);
          if (tempTime.getTime() >= currentTime.getTime() - 3600000) {
            labels.push(tempTime.getHours() + ":" + tempTime.getMinutes() + ":" + tempTime.getSeconds());
            upper.push(zoneData[i].upperMargin);
            lower.push(zoneData[i].lowerMargin);
            set.push(zoneData[i].setTemperature);
          }
        }
      }
      temp.reverse();
      labels.reverse();
      upper.reverse();
      lower.reverse();
      set.reverse();

      var tempChart = document.createElement("canvas");
      var tempCtx = tempChart.getContext("2d");
      var time = new Date().toISOString().split("T")[1].substring(0, 8);
      var data = {
        labels: labels,
        datasets: [{
            label: "temperature",
            data: temp,
            fill: false,
            hoverBackgroundColor: "rgba(75, 192, 192, 0.4)",
            borderColor: "rgb(75, 192, 192)",
            tension: 0.1,
            pointStyle: "none",
            pointRadius: 1,

          },
          {
            label: "uppermargin",
            data: upper,
            fill: false,
            borderColor: "red",
            tension: 0.1,
            pointRadius: 1,
            pointStyle: "dash",
          },
          {
            label: "lowermargin",
            data: lower,
            fill: false,
            borderColor: "blue",
            tension: 0.1,
            pointRadius: 1,
            pointstyle: "dash",
          },
          {
            label: "set Temperature",
            data: set,
            fill: false,
            borderColor: "green",
            tension: 0.1,
            pointRadius: 1,
            pointstyle: "dash",
          },
        ],
      };
      var tempConfig = {
        type: "line",
        data: data,
        options: {
          plugins: {
            legend: {
              display: false, // Remove legend
            },
          },
          animation: false
        },
      };
      var tempContainer = document.createElement("div");
      tempContainer.id = "tempContainer";
      tempContainer.textContent = "Temperature over past hour (Â°C)"
      tempContainer.classList.add("p-3", "text-center", "border")
      tempContainer.appendChild(tempChart);

      dynamicCharts[dynamicChartName] = new Chart(tempCtx, tempConfig);
      document.getElementById("moreDetails").appendChild(tempContainer);


    }


    function loadHumidityChart(key) {
      var HumidityChart = document.createElement("canvas");
      var HumidityChartContainer = document.createElement("div");
      HumidityChartContainer.id = "energyUseContainer";
      HumidityChartContainer.textContent = "Humidity over past hour (%Rh)";
      HumidityChartContainer.classList.add("p-3", "mt-2", "text-center", "border")
      HumidityChartContainer.appendChild(HumidityChart);

      var moreDetails = document.getElementById("moreDetails");
      moreDetails.appendChild(HumidityChartContainer);

      var humi = [];
      var labels = [];
      var dynamicChartName = "humidityChart_" + key;
      var currentTime = new Date();

      var zoneData = sensorData[key];
      if (zoneData) {
        for (var i = 0; i < zoneData.length; i++) {
          humi.push(zoneData[i].humidity.toFixed(2));
          var tempTime = new Date(zoneData[i].timestamp);
          if (tempTime.getTime() >= currentTime.getTime() - 3600000) {
            humi.push(zoneData[i].humidity.toFixed(2));
            labels.push(tempTime.getHours() + ":" + tempTime.getMinutes() + ":" + tempTime.getSeconds());
          }
        }
      }
      humi.reverse();
      labels.reverse();

      var data = {
        labels: labels,
        datasets: [{
          label: "humidity",
          data: humi,
          fill: false,
          borderColor: "rgb(75, 192, 192)",
          tension: 0.1,
          pointStyle: "none",
          pointRadius: 1,
        }, ],
      };
      var config = {
        type: "line",
        data: data,
        options: {
          plugins: {
            legend: {
              display: false,
            },
          },
          animation: false,
        },
      };

      dynamicCharts[dynamicChartName] = new Chart(HumidityChart, config);
    }

    function loadPIRChart(key) {
      var PIRChart = document.createElement("canvas");
      var PIRChartContainer = document.createElement("div");
      PIRChartContainer.id = "energyUseContainer";
      PIRChartContainer.textContent = "PIR triggered over past hour";
      PIRChartContainer.classList.add("p-3", "mt-2", "text-center", "border")
      PIRChartContainer.appendChild(PIRChart);

      var moreDetails = document.getElementById("moreDetails");
      moreDetails.appendChild(PIRChartContainer);
    }

    updatetemperature();
  </script>
  <script>
    function loadDetails(zone) {
      if (currentClickedZone != zone) {
        currentClickedZone = zone;
        var title = document.getElementById("moreDetailTitle");
        title.textContent = "Zone Details: " + zone.key;
        var table = document.getElementById("moreDetails");
        table.innerHTML = "";
        rowhead = document.createElement("div");
        rowhead.classList.add("row", "m-2");


        col1 = document.createElement("div");
        col1.classList.add("col", "text-start");

        col2 = document.createElement("div");
        col2.classList.add("col", "text-end");

        var creationTime = document.createElement("div");
        creationTime.classList.add("col", "text-end");
        creationTime.id = "LastUpdatedTime";
        creationTime.textContent = "Updated Time: " + new Date().toLocaleTimeString([], {
          hour: '2-digit',
          minute: '2-digit'
        });
        col2.appendChild(creationTime);

        var moreDetailsButton = document.createElement("submit");
        moreDetailsButton.classList.add("btn", "btn-primary");
        moreDetailsButton.textContent = "More Details";
        var floorlevel = $('#floorSelector').val();
        moreDetailsButton.addEventListener("click", function() {
          window.location.href = "/moreDetails/?zone=" + zone.key + "&floorlevel=" + floorlevel;
        });
        col1.appendChild(moreDetailsButton);

        rowhead.appendChild(col1);
        rowhead.appendChild(col2);

        table.appendChild(rowhead);

        var zoneName = zone.key;



        var table = document.getElementById("gaugeTable")
        table.innerHTML = "";
        var zoneName = zone.key;
        var row1 = document.createElement("div");
        row1.classList.add("row", "align-items-center", "justify-content-center", "text-center");

        var title = document.createElement("div")
        title.classList.add("col", "text-center");
        title.textContent = zoneName;

        var editnStateIndicatorContainer = document.createElement("div");
        editnStateIndicatorContainer.classList.add("row", "align-content-end", "text-end");

        var editButtonContainer = document.createElement("div");
        editButtonContainer.classList.add("col", "align-content-start","text-start");

        var stateIndicatorContainer = document.createElement("div");
        stateIndicatorContainer.classList.add("col", "text-center", "d-flex", "justify-content-center", "align-items-center");
        var stateIndicatortext = document.createElement("div");
        stateIndicatortext.innerHTML = "Status: ";

        var stateIndicator = document.createElement("div"); 
        stateIndicator.setAttribute("data-bs-toggle", "tooltip");
        stateIndicator.setAttribute("data-bs-placement", "top");
        stateIndicator.setAttribute("title", "Click to toggle state");
        stateIndicator.addEventListener("mouseover", function(){
          stateIndicator.style.cursor = "pointer";

        });
        stateIndicatorContainer.style.fontSize = "1.5rem";

        stateIndicator.id = "stateIndicator";
        if(sensorData[zoneName][0].status){
          stateIndicator.textContent = "ðŸŸ¢ ON";
        } else {
          stateIndicator.textContent = "ðŸ”´ OFF";
        }
        stateIndicatorContainer.appendChild(stateIndicatortext);
        stateIndicatorContainer.appendChild(stateIndicator);

        editnStateIndicatorContainer.appendChild(editButtonContainer);
        editnStateIndicatorContainer.appendChild(stateIndicatorContainer);
        


        var editButton = document.createElement("button");
        editButton.classList.add("btn", "btn-secondary", "text-en", "editButton");
        editButton.textContent = "Edit";
        editButton.addEventListener("click", function() {
          editTemp = sensorData[zoneName][0].setTemperature;
          tempReading.textContent = editTemp + "C";
          


          var increaseButtonContianer = document.createElement("div");
          increaseButtonContianer.classList.add("col", "text-center", "d-flex", "justify-content-center", "align-items-center");
          var increaseButton = document.createElement("button");
          increaseButton.classList.add("btn", "btn-success");
          increaseButton.textContent = "+";
          increaseButton.addEventListener("click", function() {
            editTemp += 1;
            tempReading.textContent = editTemp + "C";
          });
          increaseButtonContianer.appendChild(increaseButton);


          var decreaseButtonContianer = document.createElement("div");
          decreaseButtonContianer.classList.add("col", "text-center", "d-flex", "justify-content-center", "align-items-center");
          var decreaseButton = document.createElement("button");
          decreaseButton.classList.add("btn", "btn-danger");
          decreaseButton.textContent = "-";
          decreaseButton.addEventListener("click", function() {
            editTemp -= 1;
            tempReading.textContent = editTemp + "C";
          });
          decreaseButtonContianer.appendChild(decreaseButton);


          row2.innerHTML = "";
          row2.appendChild(increaseButtonContianer);
          row2.appendChild(tempReading);
          row2.appendChild(decreaseButtonContianer);
          editButtonContainer.removeChild(editButton);

          var closeButton = document.createElement("button");
          closeButton.classList.add("btn", "btn-danger", "text-en", "editButton");
          closeButton.textContent = "x";
          closeButton.addEventListener("click", function() {
            row2.innerHTML = "";
            row2.appendChild(tempReading);
            editButtonContainer.removeChild(closeButton);
            editButtonContainer.appendChild(editButton);
            table.removeChild(confirmButtonContainer);
            tempReading.textContent = sensorData[zoneName][0].setTemperature + "C";
            tempReading.id = "tempReading";
          });
          editButtonContainer.appendChild(closeButton);

          confirmButtonContainer = document.createElement("div");
          confirmButtonContainer.classList.add("row", "text-center");
          var confirmButton = document.createElement("button");
          confirmButton.classList.add("btn", "btn-success", );
          confirmButton.textContent = "Confirm";
          confirmButton.id = "confirmButton";
          confirmButton.addEventListener("click", function() {
            console.log("editTemp: ", editTemp)
            socket.emit("change", {
              setTemperature: editTemp,
              zone: zoneName,
              floor: floorlevel
            })

            row2.innerHTML = "";
            tempReading.textContent = sensorData[zoneName][0].setTemperature + "C";
            row2.appendChild(tempReading);
            editButtonContainer.removeChild(closeButton);
            editButtonContainer.appendChild(editButton);
            table.removeChild(confirmButtonContainer);
          });
          confirmButtonContainer.appendChild(confirmButton);
          table.appendChild(confirmButtonContainer);

        });

        editButtonContainer.appendChild(editButton);
        table.appendChild(editnStateIndicatorContainer);

        var row2 = document.createElement("div");
        row2.classList.add("row");
        var tempReading = document.createElement("div");
        tempReading.classList.add("col", "text-center", "mt-5", "temp-meter");
        tempReading.id = "tempReading";
        tempReading.textContent = "gauge";
        tempReading.textContent = sensorData[zoneName][0].setTemperature + "C";



        row1.appendChild(title);
        row2.appendChild(tempReading);


        table.appendChild(row1);
        table.appendChild(row2);
        loadCharts(zoneName);
      } else if (currentClickedZone == zone) {
        if (!document.getElementById("confirmButton")) {
          //currentClickedZone is object where the name of click is zone is in key, named "key"
          var tempreading = document.getElementById("tempReading");
          tempreading.textContent = sensorData[zone.key][0].setTemperature + "C";
          zone = currentClickedZone.key;


          var oldDatasest = dynamicCharts["tempChart_" + zone].config.data.datasets;
          var temp = [];
          var upper = [];
          var lower = [];
          var set = [];
          var labels = [];
          var currentTime = new Date();
          var zoneData = sensorData[zone];
          if (zoneData) {
            for (var i = 0; i < zoneData.length; i++) {
              var tempTime = new Date(zoneData[i].timestamp);
              if (tempTime.getTime() >= currentTime.getTime() - 3600000) {
                temp.push(zoneData[i].temperature.toFixed(2));
                labels.push(tempTime.getHours() + ":" + tempTime.getMinutes() + ":" + tempTime.getSeconds());
                upper.push(zoneData[i].upperMargin);
                lower.push(zoneData[i].lowerMargin);
                set.push(zoneData[i].setTemperature);
              }
            }
          }
          temp.reverse();
          labels.reverse();
          upper.reverse();
          lower.reverse();
          set.reverse();
          oldDatasest[0].data = temp;
          oldDatasest[1].data = upper;
          oldDatasest[2].data = lower;
          oldDatasest[3].data = set;
          dynamicCharts["tempChart_" + zone].config.data.labels = labels;
          dynamicCharts["tempChart_" + zone].config.datasets = oldDatasest;
          dynamicCharts["tempChart_" + zone].update();

          var humi = [];
          var humiLabels = [];
          for(data in zoneData){
            humi.push(zoneData[data].humidity.toFixed(2));
            var tempTime = new Date(zoneData[data].timestamp);
            if (tempTime.getTime() >= currentTime.getTime() - 3600000) {
              humi.push(zoneData[data].humidity.toFixed(2));
              humiLabels.push(tempTime.getHours() + ":" + tempTime.getMinutes() + ":" + tempTime.getSeconds());
            }
          }
          humi.reverse();
          humiLabels.reverse();
          dynamicCharts["humidityChart_" + zone].config.data.labels = humiLabels;
          dynamicCharts["humidityChart_" + zone].config.data.datasets[0].data = humi;
          dynamicCharts["humidityChart_" + zone].update();
          
          



        }


      }
    }

    function loadCharts(key) {
      var creationTime = document.getElementById("creationTime");
      loadTempChart(key);
      loadHumidityChart(key);
      loadPIRChart(key);

    }




    function updateEnergy() {
      var energyAlert = document.createElement("li");
      energyAlert.id = "energyAlert";
      var currentTime = new Date();
      //    console.log(currentTime)
      currentTime = currentTime.getTime();
      energyMeter = document.getElementById("energyMeter");
      var alertList = document.getElementById("alertMessageList");
      alertList.style.listStyle = "none";
      try {
        var tempTime = new Date(energyData["1"][0].timestamp)
        var milisecondtempTime = tempTime.getTime();
      } catch {
        //nothing
      }

      floor = $('#floorSelector').val();
      if (!energyData[floor]) {
        energyMeter.textContent = "ERROR";
        energyAlert.textContent = "No Energy Reading available for this floor";
        alertMessageList.appendChild(energyAlert);
        energyMeter.addEventListener("click", function() {
          $('#offcanvas').offcanvas('show')
          energyAlert.classList.add('highlight');
          alertMessageList.appendChild(energyAlert);
          $('#offcanvas').on('hidden.bs.offcanvas', function() {
            energyAlert.classList.remove('highlight');
          });
        });
        var energyCanvas = document.getElementById("energyChart");
        energyCanvas.addEventListener("click", function() {
          $('#offcanvas').offcanvas('show')
          energyAlert.classList.add('highlight');
          alertMessageList.appendChild(energyAlert);
          $('#offcanvas').on('hidden.bs.offcanvas', function() {
            energyAlert.classList.remove('highlight');
          });
        });
        alertCount++;
        updateAlertCount();
      } else if (currentTime - milisecondtempTime > 3600000) {

        var timeDiffMin = Math.floor(((currentTime - milisecondtempTime) / 60000));
        energyAlert.textContent = "Energy Readings last updated " + new Date(energyData[floorlevel][0].timestamp);
        alertMessageList.appendChild(energyAlert);
        alertCount++;
        updateAlertCount();

        var currentTime = new Date()
        var year = currentTime.getFullYear();
        var month = currentTime.getMonth();
        var energyDataset = energyData[floor];

        var endEnergyUsed
        for (data in energyDataset) {
          var tempTime = new Date(energyDataset[data].timestamp)
          if (tempTime.getMonth() == month && tempTime.getFullYear() == year) {
            endEnergyUsed = energyDataset[data].energy
            break
          }
        }
        energyDataset.reverse()

        var initalEnergyUsed
        for (data in energyDataset) {
          var tempTime = new Date(energyDataset[data].timestamp)
          if (tempTime.getMonth() == month && tempTime.getFullYear() == year) {
            initalEnergyUsed = energyDataset[data].energy
            break
          }
        }
        energyDataset.reverse()
        var energyUsed = (endEnergyUsed - initalEnergyUsed).toFixed(2);
        energyMeter.textContent = energyUsed + "kwh";

      } else {
        //   console.log("updating energy");
        var currentTime = new Date()
        var year = currentTime.getFullYear();
        var month = currentTime.getMonth();
        var energyDataset = energyData[floor];

        var endEnergyUsed
        for (data in energyDataset) {
          var tempTime = new Date(energyDataset[data].timestamp)
          if (tempTime.getMonth() == month && tempTime.getFullYear() == year) {
            endEnergyUsed = energyDataset[data].energy
            break
          }
        }
        energyDataset.reverse()

        var initalEnergyUsed
        for (data in energyDataset) {
          var tempTime = new Date(energyDataset[data].timestamp)
          if (tempTime.getMonth() == month && tempTime.getFullYear() == year) {
            initalEnergyUsed = energyDataset[data].energy
            break
          }
        }
        energyDataset.reverse()
        var energyUsed = (endEnergyUsed - initalEnergyUsed).toFixed(2);
        energyMeter.textContent = energyUsed + "kwh";
      }
      //  console.log(tempTime)

    }

    function updateAlertCount() {
      $('#warning').text("ðŸ ¡ Alerts(" + alertCount + ")");
    }



    function loadEnergyChart() {
      var labels = [];
      var energyDataset = [];
      var floorlevel = $('#floorSelector').val();
      var timeGranularity = $('#timeGranularity').val();
      var selectedDay = $('#datepicker').val();
      console.log(selectedDay)

      if (!dynamicCharts["energyChart"]) {
        var energyCanvas = document.getElementById("energyChart");
        var energyCtx = energyCanvas.getContext("2d");

        var [dayEnergyUsed, labels, average] = energyChartValue(timeGranularity, floorlevel, selectedDay)
        console.log(dayEnergyUsed, average)

        var energyChartData = {
          labels: labels,
          datasets: [{
            label: "Energy Used(KWH)",
            data: dayEnergyUsed,
            fill: "yellow",
            backgroundColor: "yellow",
            borderColor: "rgb(196, 196, 0)",
            tension: 0.1,
            radius: 1,
          }, ]
        }



        var energyConfig = {
          type: "bar",
          data: energyChartData,
          options: {
            scales: {
              xAxes: [{
                ticks: {
                  autoSkip: false
                }
              }]
            },
            plugins: {
              legend: {
                display: false,
              },
              title: {
                display: true,
                text: 'Energy used on ' + new Date(selectedDay).toLocaleDateString() + ' (kwh)',
              },

            },
          },
        }

        dynamicCharts["energyChart"] = new Chart(energyCtx, energyConfig);
        energyChartTitle(selectedDay)
        energyCanvas.addEventListener("click", energyClickHandler)
      } else {

        [dayEnergyUsed, labels] = energyChartValue(timeGranularity, floorlevel, selectedDay)

        dynamicCharts["energyChart"].config.data.labels = labels;
        dynamicCharts["energyChart"].config.data.datasets[0].data = dayEnergyUsed;
        dynamicCharts["energyChart"].update();
        energyChartTitle(selectedDay)

      }
    }

    function energyClickHandler(click) {
      var timeGranularity = $('#timeGranularity').val();
      var date = $('#datepicker').val();
      var date = new Date(date);
      var month = date.getMonth();
      var year = date.getFullYear();
      const points = dynamicCharts["energyChart"].getElementsAtEventForMode(click, 'nearest', {
        intersect: true
      }, true);
      if (points.length > 0) {
        const firstPoint = points[0];
        const label = dynamicCharts["energyChart"].data.labels[firstPoint.index];
        const value = dynamicCharts["energyChart"].data.datasets[firstPoint.datasetIndex].data[firstPoint.index];
        if (timeGranularity == "month") {
          var tempTime = new Date(year, month, label + 1)
          var datepicker = document.getElementById("datepicker");
          datepicker.value = tempTime.toISOString().split('T')[0];
          $('#timeGranularity').val("day")
        } else if (timeGranularity == "year") {
          var month = monthNameToNumber(label)
          var tempTime = new Date(year, month, 1)
          var datepicker = document.getElementById("datepicker");
          datepicker.value = tempTime.toISOString().split('T')[0];
          $('#timeGranularity').val("month")
        }
        loadEnergyChart()
      }
    }



    function energyChartTitle(selectedDay) {
      var timeGranularity = $('#timeGranularity').val();

      if (timeGranularity == "day") {
        dynamicCharts["energyChart"].config.options.plugins.title.text = 'Energy used on ' + new Date(selectedDay).toLocaleDateString() + ' (kwh)';
      } else if (timeGranularity == "week") {
        let selectedDate = new Date(selectedDay);
        let startDate = new Date(selectedDate);
        startDate.setDate(selectedDate.getDate() - selectedDate.getDay() + 1);
        let endDate = new Date(startDate);
        endDate.setDate(startDate.getDate() + 6);
        dynamicCharts["energyChart"].config.options.plugins.title.text = 'Energy used from ' + startDate.toLocaleDateString() + ' to ' + endDate.toLocaleDateString() + ' (kwh)';
      } else if (timeGranularity == "month") {
        dynamicCharts["energyChart"].config.options.plugins.title.text = 'Energy used during ' + new Date(selectedDay).toLocaleString('default', {
          month: 'long',
          year: 'numeric'
        }) + ' (kwh)';
      } else if (timeGranularity == "year") {
        dynamicCharts["energyChart"].config.options.plugins.title.text = 'Energy used during ' + new Date(selectedDay).getFullYear() + ' (kwh)';
        try {
          var name = currentClickedZone.key;
        } catch {
          console.log("no zone selected")
        }
      }
      dynamicCharts["energyChart"].update();

    }

    function energyChartValue(timeGranularity, floorlevel, selectedDay) {
      var labels = [];
      var selectedDate = new Date(selectedDay)
      var currentDay = selectedDate.getDate()
      var energyDataset = energyData[floorlevel];
      console.log(energyDataset)
      if (timeGranularity == "day") {
        var endEnergyUsed = [];
        for (var i = 0; i < 24; i++) {
          for (data in energyDataset) {
            var tempTime = new Date(energyDataset[data].timestamp);
            if (tempTime.getDate() == currentDay && tempTime.getHours() == i && tempTime.getMonth() == selectedDate.getMonth() && tempTime.getFullYear() == selectedDate.getFullYear()) {
              endEnergyUsed.push(energyDataset[data].energy);
              break;
            }
          }
          if (!endEnergyUsed[i]) {
            endEnergyUsed.push(0); //no energy used for hour
          }
        }
        energyDataset.reverse();

        var initalEnergyUsed = [];
        for (var i = 0; i < 24; i++) {
          for (data in energyDataset) {
            var tempTime = new Date(energyDataset[data].timestamp);
            if (tempTime.getDate() == currentDay && tempTime.getHours() == i && tempTime.getMonth() == selectedDate.getMonth() && tempTime.getFullYear() == selectedDate.getFullYear()) {
              initalEnergyUsed.push(energyDataset[data].energy);
              break;
            }
          }
          if (!initalEnergyUsed[i]) {
            initalEnergyUsed.push(0); //no energy used for hour
          }
        }
        var dayEnergyUsed = []
        for (var i = 0; i < 24; i++) {
          dayEnergyUsed.push(endEnergyUsed[i] - initalEnergyUsed[i]);
        }
        var average = 0;
        for (var i = 0; i < 24; i++) {
          average += dayEnergyUsed[i];
        }
        average = average / 24;


        for (var i = 0; i < 24; i++) {
          labels.push(i + ":00");
        }

        energyDataset.reverse();

        console.log(dayEnergyUsed, labels)
      } else if (timeGranularity == "week") {
        var day = selectedDate.getDay();
        //find the diff from day to 1 start
        var offset = day - 1;
        //find the start of the week
        var start = new Date(selectedDate.setDate(selectedDate.getDate() - offset));
        //push weekdates to labels
        var labels = [];
        for (var i = 0; i < 7; i++) {
          var tempDate = new Date(start);
          tempDate.setDate(tempDate.getDate() + i);
          labels.push(tempDate.toLocaleDateString().split('T')[0]);
        }

        console.log(labels)

        var endEnergy = [];
        var initalEnergyUsed = [];

        for (date in labels) {
          for (data in energyDataset) {
            var tempTime = new Date(energyDataset[data].timestamp);
            var tempTime = tempTime.toLocaleDateString().split('T')[0];
            if (tempTime == labels[date]) {
              endEnergy.push(energyDataset[data].energy);
              break;
            }
          }
          if (!endEnergy[date]) {
            endEnergy.push(0);
          }
        }

        energyDataset.reverse();
        for (date in labels) {
          for (data in energyDataset) {
            var tempTime = new Date(energyDataset[data].timestamp);
            var tempTime = tempTime.toLocaleDateString().split('T')[0];
            if (tempTime == labels[date]) {
              initalEnergyUsed.push(energyDataset[data].energy);
              break;
            }
          }
          if (!endEnergy[date]) {
            initalEnergyUsed.push(0);
          }
        }

        energyDataset.reverse();
        var dayEnergyUsed = []
        for (var i = 0; i < 7; i++) {
          dayEnergyUsed.push(endEnergy[i] - initalEnergyUsed[i]);
        }
        var average = 0;
        for (var i = 0; i < 7; i++) {
          average += dayEnergyUsed[i];
        }
        average = average / 7;
      } else if (timeGranularity == "month") {
        var month = selectedDate.getMonth();
        var year = selectedDate.getFullYear();

        var totalDays = daysInMonth(month, year);

        var labels = [];
        for (var i = 1; i <= totalDays; i++) {
          labels.push(i);
        }

        var endEnergy = [];
        var initialEnergyUsed = [];

        // Collect endEnergy and initialEnergyUsed
        for (var i = 1; i <= totalDays; i++) {
          for (data in energyDataset) {
            var tempTime = new Date(energyDataset[data].timestamp);
            if (tempTime.getDate() == i && tempTime.getMonth() == month && tempTime.getFullYear() == year) {
              endEnergy.push(energyDataset[data].energy);
              break;
            }
          }
          if (!endEnergy[i - 1]) {
            endEnergy.push(0);
          }
        }

        energyDataset.reverse();
        for (var i = 1; i <= totalDays; i++) {
          for (data in energyDataset) {
            var tempTime = new Date(energyDataset[data].timestamp);
            if (tempTime.getDate() == i && tempTime.getMonth() == month && tempTime.getFullYear() == year) {
              initialEnergyUsed.push(energyDataset[data].energy);
              break;
            }
          }
          if (!endEnergy[i - 1]) {
            initialEnergyUsed.push(0);
          }
        }
        energyDataset.reverse();

        // Calculate EnergyUsed
        var dayEnergyUsed = [];
        for (var i = 0; i < totalDays; i++) {
          dayEnergyUsed.push(endEnergy[i] - initialEnergyUsed[i]);
        }


        var average = 0;
        for (var i = 0; i < totalDays; i++) {
          average += dayEnergyUsed[i];
        }
        average = average / totalDays;
        return [dayEnergyUsed, labels, average];
      } else if (timeGranularity == "year") {
        var month = selectedDate.getMonth();
        var year = selectedDate.getFullYear();
        var labels = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        var ddmmyy = [];
        for (var i = 0; i < 12; i++) {
          var tempDate = new Date(year, i, 1);
          ddmmyy.push(tempDate);
        }
        var endEnergy = [];
        var initalEnergyUsed = [];

        for (date in ddmmyy) {
          var month = ddmmyy[date].getMonth();
          var year = ddmmyy[date].getFullYear();
          for (data in energyDataset) {
            var tempTime = new Date(energyDataset[data].timestamp);
            if (tempTime.getMonth() == month && tempTime.getFullYear() == year) {
              endEnergy.push(energyDataset[data].energy);
              break;
            }
          }
          if (!endEnergy[date]) {
            endEnergy.push(0);
          }
        }
        energyDataset.reverse();
        for (date in ddmmyy) {
          var month = ddmmyy[date].getMonth();
          var year = ddmmyy[date].getFullYear();
          for (data in energyDataset) {
            var tempTime = new Date(energyDataset[data].timestamp);
            if (tempTime.getMonth() == month && tempTime.getFullYear() == year) {
              initalEnergyUsed.push(energyDataset[data].energy);
              break;
            }
          }
          if (!endEnergy[date]) {
            initalEnergyUsed.push(0);
          }
        }
        energyDataset.reverse();
        var dayEnergyUsed = []
        for (var i = 0; i < 12; i++) {
          dayEnergyUsed.push(endEnergy[i] - initalEnergyUsed[i]);
        }

        var average = 0;
        for (var i = 0; i < 12; i++) {
          average += dayEnergyUsed[i];
        }
        average = average / 12;
      }
      return [dayEnergyUsed, labels, average];

    }

    $('#timeGranularity').on('change', function() {
      loadEnergyChart();
    });

    $('#datepicker').on('change', function() {
      selectedDay = $('#datepicker').val();
      loadEnergyChart();
    });

    loadEnergyChart();
    updateEnergy();
    updateAlertCount();
  </script>
  <script>

    window.addEventListener("resize",() => {
      $("")
    })


    $(document).ready(function() {
      $('#warning').on('click', function() {
        $('#warning').text("ðŸ ¡ Alerts(" + alertCount + ")");
        $('#offcanvas').offcanvas('show')
      });
    });
  </script>
</body>

</html>